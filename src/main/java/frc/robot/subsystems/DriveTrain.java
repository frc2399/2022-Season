

//Clare was here!!!!

//Herb was here !!!!

//Alison was here :)

//Maisie was here :))))))))))))))



// RobotBuilder Version: 4.0
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;
import frc.robot.Constants.DriveConstants;
//import frc.robot.commands.*;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.CANSparkMax;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
public static final double Speed = 0.5;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax leftFrontMotorController;
private CANSparkMax rightFrontMotorController;
private CANSparkMax leftMiddleMotorController;
private CANSparkMax rightMiddleMotorController;
private CANSparkMax leftBackMotorController;
private CANSparkMax rightBackMotorController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {

        //Define all Motor Controllers
        leftFrontMotorController = new CANSparkMax(DriveConstants.LEFT_FRONT_MOTOR_ID, MotorType.kBrushed);
        rightFrontMotorController = new CANSparkMax(DriveConstants.RIGHT_FRONT_MOTOR_ID, MotorType.kBrushed);
        leftMiddleMotorController = new CANSparkMax(DriveConstants.LEFT_MIDDLE_MOTOR_ID, MotorType.kBrushed);
        rightMiddleMotorController = new CANSparkMax(DriveConstants.RIGHT_MIDDLE_MOTOR_ID, MotorType.kBrushed);
        leftBackMotorController = new CANSparkMax(DriveConstants.BACK_LEFT_MOTOR_ID, MotorType.kBrushed);
        rightBackMotorController = new CANSparkMax(DriveConstants.BACK_RIGHT_MOTOR_ID, MotorType.kBrushed);

        //addChild takes in a sendable and its a network thing. Right now we didn't need them,
        // so we commented them out because they were giving us errors.
        //addChild("LeftFrontMotorController",leftFrontMotorController);
        //addChild("RightFrontMotor",rightFrontMotorController);
        //addChild("RightFrontMotor",leftMiddleMotorController);
        //addChild("RightFrontMotor",rightMiddleMotorController);
        //addChild("LeftBackMotor",leftBackMotorController);
        //addChild("RightBackMotor",rightBackMotorController);

        //set all motor controllers inverted
        // leftFrontMotorController.setInverted(false);
        // rightFrontMotorController.setInverted(false);
        // leftMiddleMotorController.setInverted(false);
        // rightMiddleMotorController.setInverted(false);
        // leftBackMotorController.setInverted(false);
        // rightBackMotorController.setInverted(false);

        //sets motor controllers following leaders
        leftMiddleMotorController.follow(leftFrontMotorController);
        rightMiddleMotorController.follow(rightFrontMotorController);
        leftBackMotorController.follow(leftFrontMotorController);
        rightBackMotorController.follow(rightFrontMotorController);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void setMotors(double leftSpeed, double rightSpeed) {
        leftFrontMotorController.set(leftSpeed);
        rightFrontMotorController.set(-rightSpeed);
    }

}

